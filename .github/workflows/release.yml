name: Production

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/release.yml'
      - 'src/**'
      - 'types/**'
      - '*.json'
      - '*.ts'
      - '*.tsx'
      - '*.js'
      - 'serverless.yml'
  workflow_dispatch:
    inputs:
      version:
        required: false
        description: 'Version (eg. v2.5.0)'
        default: latest

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ '14' ]
    name: Deploy to Tencent Cloudbase
    steps:

      - name: Checkout Latest Stable Version
        if: ${{ github.event.inputs.version }} == 'latest'
        uses: actions/checkout@v2

      - name: Checkout ${{ github.event.inputs.version }}
        if: github.event.inputs.version != 'latest'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.version }}

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node }}

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2.1.5
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - run: rm -f .yarnclean
      - name: Install dependencies
        run: yarn --frozen-lockfile
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
          HUSKY_SKIP_INSTALL: true

      - run: yarn build

      - name: Deploy static to Tencent CloudBase
        id: deployStatic
        uses: TencentCloudBase/cloudbase-action@v1.1.1
        with:
          secretId: ${{ secrets.TCB_SECRET_ID }}
          secretKey: ${{ secrets.TCB_SECRET_KEY }}
          envId: ${{ secrets.ENV_ID }}
          staticSrcPath: ./public
          staticIgnore: .git,.github,node_modules,.*,CODEOWNERS,*.md